41 2 0
38 1
22 8 32 48 12 0 \NUL
Lab 1
22 8 64 98 44 0 \NUL
Agrawal, Viveka
22 8 96 48 76 0 \NUL
viagrawa
22 64 272 264 252 0 \NUL
Part A Output                            
8 216 184 265 135 1 0
8 280 184 329 135 1 0
8 352 184 401 135 1 0
11 168 424 195 326 0 1
20 264 208 331 189 0
in_3
20 336 208 403 189 0
in_2
20 408 208 475 189 0
in_1
8 424 184 473 135 1 0
20 480 208 547 189 0
in_0
19 72 312 139 293 0
a_3
19 56 336 123 317 0
a_2
19 40 360 107 341 0
a_1
19 24 384 91 365 0
a_0
22 9 446 185 426 0 \NUL
The output depends on the
22 9 494 321 474 0 \NUL
Different combinations of the inverters being on
22 343 427 749 407 0 \NUL
The output depends on the 4 switches (inverters) and whether 
7 360 664 409 615 0 1
7 360 704 409 655 0 1
19 264 592 331 573 0
c_2
19 264 632 331 613 0
c_1
19 264 672 331 653 0
c_0
22 416 688 480 668 0 \NUL
SOP/POS
22 416 648 492 628 0 \NUL
NAND Only
22 416 608 484 588 0 \NUL
NOR Only
22 187 726 615 706 0 \NUL
For c_0 and c_1 (the NAND gates circuit), I used an SOP equation.
22 233 755 590 735 0 \NUL
For c_2 (the NOR gates circuit), I used a POS equation.
22 280 32 653 12 0 \NUL
You are only permitted to modify or add text to this page.
22 280 56 605 36 0 \NUL
Your circuit must use senders and/or receivers to
22 280 80 538 60 0 \NUL
interface with these inputs and outputs.
7 472 360 521 311 0 1
7 544 360 593 311 0 1
7 616 360 665 311 0 1
19 408 392 475 373 0
b_2
19 480 392 547 373 0
b_1
19 552 392 619 373 0
b_0
7 360 624 409 575 0 1
22 64 136 616 116 0 \NUL
Input                                                                                                                                 
22 448 272 650 252 0 \NUL
Part B Output                            
22 272 552 473 532 0 \NUL
Part C Output                            
22 418 455 684 435 0 \NUL
they are on logic high (1) or logic low (0).
22 9 470 160 450 0 \NUL
 4 switches (inverters).
22 9 518 394 498 0 \NUL
logic high (1) or logic low (0) will generate different outputs.
1 470 159 481 198
1 409 198 398 159
1 337 198 326 159
1 265 198 262 159
1 169 390 136 302
1 169 396 120 326
1 169 402 104 350
1 169 408 88 374
1 328 622 361 639
1 328 662 361 679
1 472 382 473 335
1 544 382 545 335
1 616 382 617 335
1 328 582 361 599
38 2
22 8 32 48 12 0 \NUL
Lab 1
22 8 64 114 44 0 \NUL
Agrawal, Viveka
22 8 96 71 76 0 \NUL
viagrawa
19 24 216 91 197 0
in_3
19 24 240 91 221 0
in_2
19 24 264 91 245 0
in_1
19 24 288 91 269 0
in_0
22 24 600 390 580 0 \NUL
these are only present so circuit simulates without error
22 24 624 291 604 0 \NUL
remove these once logic is implemented
22 32 184 262 164 0 \NUL
placeholder senders and receivers
22 209 350 645 330 0 \NUL
We suggest building each part on a new page using the -/+ buttons
38 3
22 8 32 48 12 0 \NUL
Lab 1
22 8 64 114 44 0 \NUL
Agrawal, Viveka
22 8 96 71 76 0 \NUL
viagrawa
19 24 204 91 185 0
in_3
19 21 247 88 228 0
in_2
19 21 288 88 269 0
in_1
19 22 335 89 316 0
in_0
20 129 204 196 185 0
a_3
20 125 247 192 228 0
a_2
20 124 288 191 269 0
a_1
20 127 335 194 316 0
a_0
22 9 130 51 110 0 \NUL
Part A
22 5 399 794 379 0 \NUL
In order for the input receivers to connect with the Part A senders, the input senders must connect to the Part A receivers. 
1 88 194 130 194
1 85 237 126 237
1 85 278 125 278
1 86 325 128 325
38 4
22 8 32 48 12 0 \NUL
Lab 1
22 8 64 114 44 0 \NUL
Agrawal, Viveka
22 8 97 71 77 0 \NUL
viagrawa
14 296 452 345 403
20 395 310 462 291 0
b_2
20 395 416 462 397 0
b_0
35 304 325 353 276 0 0
19 174 259 241 240 0
in_1
19 169 369 236 350 0
in_0
20 396 369 463 350 0
b_1
22 9 130 53 110 0 \NUL
Part B
22 95 531 673 511 0 \NUL
In Part B, since the b_0 output bit is all 0, I connected it to ground since ground equals 0.
22 83 587 681 567 0 \NUL
For the output bit b_1, I saw that the input bit in_0 was the exact same, so I connected them.
22 18 645 779 625 0 \NUL
For b_2, since I already connected in_0 to b_1, I wanted to try and see if I could combine one of the other input bits to
22 14 671 786 651 0 \NUL
get b_2. After trial and error, I figured out that passing in_1 and in_0 through a XOR gate gives the same output as b_2.
1 342 427 396 406
1 238 249 305 286
1 233 359 305 314
1 350 300 396 300
1 233 359 397 359
38 5
22 8 32 48 12 0 \NUL
Lab 1
22 8 64 114 44 0 \NUL
Agrawal, Viveka
22 9 96 72 76 0 \NUL
viagrawa
19 163 53 230 34 0
in_2
19 164 113 231 94 0
in_1
19 164 172 231 153 0
in_0
19 164 232 231 213 0
in_1
19 167 294 234 275 0
in_0
19 167 420 234 401 0
in_2
19 168 480 235 461 0
in_1
19 168 539 235 520 0
in_0
19 168 599 235 580 0
in_1
19 171 661 238 642 0
in_0
5 259 68 308 19 0
5 260 187 309 138 0
5 268 676 317 627 0
5 260 247 309 198 0
5 266 614 315 565 0
3 370 142 419 93 0 0
3 372 261 421 212 0 0
3 372 639 421 590 0 0
3 549 130 598 81 0 0
3 368 524 417 475 0 0
3 557 486 606 437 0 0
4 465 203 514 154 0 0
4 636 317 685 268 0 0
20 711 302 778 283 0
c_0
4 478 575 527 526 0 0
22 9 130 125 110 0 \NUL
SOP receiver c_0
22 75 728 701 708 0 \NUL
I implemented the truth table using the SOP, created this circuit, and connected it to receiver c_0
1 227 43 260 43
1 228 162 261 162
1 228 222 261 222
1 232 589 267 589
1 235 651 269 651
1 228 103 371 103
1 306 162 371 131
1 306 222 373 222
1 231 284 373 250
1 418 236 466 192
1 416 117 466 164
1 511 178 550 119
1 305 43 550 91
1 682 292 712 292
1 595 105 637 278
1 312 589 373 600
1 314 651 373 628
1 232 470 369 485
1 232 529 369 513
1 414 499 479 536
1 418 614 479 564
1 231 410 558 447
1 524 550 558 475
1 603 461 637 306
38 6
22 9 32 49 12 0 \NUL
Lab 1
22 8 60 114 40 0 \NUL
Agrawal, Viveka
22 8 89 71 69 0 \NUL
viagrawa
19 12 149 79 130 0
in_2
19 13 194 80 175 0
in_1
19 13 242 80 223 0
in_0
19 13 315 80 296 0
in_2
19 14 364 81 345 0
in_1
19 16 411 83 392 0
in_0
19 15 482 82 463 0
in_2
19 16 536 83 517 0
in_1
19 17 588 84 569 0
in_0
19 15 659 82 640 0
in_2
19 16 714 83 695 0
in_1
19 16 766 83 747 0
in_0
3 223 671 272 622 0 1
3 172 731 221 682 0 1
3 224 795 273 746 0 1
3 175 511 224 462 0 1
3 140 358 189 309 0 1
3 182 255 231 206 0 1
3 334 178 383 129 1 1
3 335 358 384 309 1 1
3 330 551 379 502 1 1
3 334 731 383 682 1 1
3 483 430 532 381 2 1
3 605 430 654 381 0 1
20 701 415 768 396 0
c_1
22 9 117 125 97 0 \NUL
SOP receiver c_1
22 202 41 746 21 0 \NUL
From the circuit I created for c_0, I created this circuit (which also implements SOP) 
22 273 75 645 55 0 \NUL
using only NAND gates, and connected it to receiver c_1 
1 79 649 224 632
1 224 660 79 649
1 80 704 173 692
1 173 720 80 704
1 80 756 225 756
1 80 756 225 784
1 79 472 176 472
1 79 472 176 500
1 78 354 141 319
1 78 354 141 347
1 77 232 183 216
1 77 232 183 244
1 76 139 335 139
1 77 184 335 153
1 228 230 335 167
1 186 333 336 333
1 77 305 336 319
1 80 401 336 347
1 221 486 331 512
1 80 526 331 526
1 81 578 331 540
1 269 646 335 692
1 218 706 335 706
1 270 770 335 720
1 380 153 484 391
1 381 333 484 400
1 376 526 484 410
1 380 706 484 419
1 529 405 606 391
1 529 405 606 419
1 651 405 702 405
38 7
22 8 29 48 9 0 \NUL
Lab 1
22 8 55 114 35 0 \NUL
Agrawal, Viveka
22 9 82 72 62 0 \NUL
viagrawa
19 16 142 83 123 0
in_2
19 17 187 84 168 0
in_1
19 17 235 84 216 0
in_0
19 17 308 84 289 0
in_2
19 18 357 85 338 0
in_1
19 20 404 87 385 0
in_0
19 19 475 86 456 0
in_2
19 20 529 87 510 0
in_1
19 21 581 88 562 0
in_0
19 19 652 86 633 0
in_2
19 20 707 87 688 0
in_1
19 20 759 87 740 0
in_0
4 207 153 256 104 0 1
4 211 199 260 150 0 1
4 209 252 258 203 0 1
4 208 321 257 272 0 1
4 170 537 219 488 0 1
4 213 779 262 730 0 1
4 413 191 462 142 1 1
4 416 363 465 314 1 1
4 410 537 459 488 1 1
4 413 722 462 673 1 1
4 538 442 587 393 2 1
4 638 442 687 393 0 1
20 707 427 774 408 0
c_2
22 9 108 125 88 0 \NUL
POS receiver c_2
22 347 77 557 57 0 \NUL
and connected it to receiver c_2
22 163 44 753 24 0 \NUL
I implemented the truth table using the POS and created this circuit using only NOR gates, 
1 80 132 208 114
1 80 132 208 142
1 81 177 212 160
1 81 177 212 188
1 81 225 210 213
1 81 225 210 241
1 81 298 209 282
1 81 298 209 310
1 84 519 171 498
1 84 519 171 526
1 84 749 214 768
1 84 749 214 740
1 253 128 414 152
1 257 174 414 166
1 255 227 414 180
1 254 296 417 324
1 82 347 417 338
1 84 394 417 352
1 83 465 411 498
1 216 512 411 512
1 85 571 411 526
1 83 642 414 683
1 84 697 414 697
1 259 754 414 711
1 459 166 539 403
1 462 338 539 412
1 456 512 539 422
1 459 697 539 431
1 584 417 639 403
1 584 417 639 431
1 684 417 708 417
39 16777215
47 0
40 1 8 8
50 800 800
51 1 30
30
System
20
700
0
0
1
2
2
34
